import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from math import radians, sin, cos, sqrt, asin
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics
from sklearn.metrics import r2_score

# Load and inspect data
df = pd.read_csv('uber - uber.csv')
print(df.info())
print(df.shape)
print(df.head(7))

# Data Cleaning
df.dropna(inplace=True)
df.drop(columns=["Unnamed: 0", "key"], inplace=True)
print(df.isnull().sum())
print(df.dtypes)

# Convert pickup_datetime to datetime type and create additional time-based features
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])
df = df.assign(
    hour=df.pickup_datetime.dt.hour,
    day=df.pickup_datetime.dt.day,
    month=df.pickup_datetime.dt.month,
    year=df.pickup_datetime.dt.year,
    dayofweek=df.pickup_datetime.dt.dayofweek
)
df.drop("pickup_datetime", axis=1, inplace=True)
print(df.head())

# Define distance calculation function
def distance_formula(longitude1, latitude1, longitude2, latitude2):
    travel_dist = []
    for pos in range(len(longitude1)):
        lon1, lat1, lon2, lat2 = map(radians, [longitude1[pos], latitude1[pos], longitude2[pos], latitude2[pos]])
        dist_lon, dist_lat = lon2 - lon1, lat2 - lat1
        a = sin(dist_lat/2)**2 + cos(lat1) * cos(lat2) * sin(dist_lon/2)**2
        travel_dist.append(2 * asin(sqrt(a)) * 6371)  # Earth's radius in km
    return travel_dist

# Add travel distance to DataFrame
df['dist_travel_km'] = distance_formula(
    df['pickup_longitude'].to_numpy(), df['pickup_latitude'].to_numpy(),
    df['dropoff_longitude'].to_numpy(), df['dropoff_latitude'].to_numpy()
)

# Outlier removal with IQR method
def remove_outlier(df, col):
    Q1, Q3 = df[col].quantile(0.25), df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower, upper = Q1 - 1.5 * IQR, Q3 + 1.5 * IQR
    df[col] = np.clip(df[col], lower, upper)
    return df

def treat_outliers_all(df, col_list):
    for col in col_list:
        df = remove_outlier(df, col)
    return df

df = treat_outliers_all(df, df.columns)
df.plot(kind="box", subplots=True, layout=(7, 2), figsize=(15, 20))
plt.show()

# Correlation Heatmap
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f", figsize=(10, 6))
plt.show()

# Define input (X) and output (y) for the model
X = df[['pickup_longitude', 'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude', 
        'passenger_count', 'hour', 'day', 'month', 'year', 'dayofweek', 'dist_travel_km']]
y = df['fare_amount']

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.46, random_state=46)

# Linear Regression Model
reg = LinearRegression()
reg.fit(x_train, y_train)
y_pred_lin = reg.predict(x_test)

# Random Forest Model
rf = RandomForestRegressor(n_estimators=10)
rf.fit(x_train, y_train)
y_pred_rf = rf.predict(x_test)

# Model Performance Comparison
result_tabulation = pd.DataFrame(columns=['Model', 'RMSE', 'R-Squared'])

# Linear Regression metrics
reg_RMSE = np.sqrt(metrics.mean_squared_error(y_test, y_pred_lin))
reg_R2 = r2_score(y_test, y_pred_lin)
result_tabulation = result_tabulation._append({'Model': 'Linear Regression', 'RMSE': reg_RMSE, 'R-Squared': reg_R2}, ignore_index=True)

# Random Forest metrics
rf_RMSE = np.sqrt(metrics.mean_squared_error(y_test, y_pred_rf))
rf_R2 = r2_score(y_test, y_pred_rf)
result_tabulation = result_tabulation._append({'Model': 'Random Forest', 'RMSE': rf_RMSE, 'R-Squared': rf_R2}, ignore_index=True)

print(result_tabulation)
