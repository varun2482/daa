import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score


df = pd.read_csv("diabetes.csv")  
print(df.head()) 



df["Glucose"].replace(0, df["Glucose"].mean(), inplace=True)
df["BloodPressure"].replace(0, df["BloodPressure"].mean(), inplace=True)
df["SkinThickness"].replace(0, df["SkinThickness"].mean(), inplace=True)
df["Insulin"].replace(0, df["Insulin"].mean(), inplace=True)
df["BMI"].replace(0, df["BMI"].mean(), inplace=True)
print(df.head()) 

# Splitting the dataset into features (X) and target variable (Y)
X = df.iloc[:, :8]  # Selecting the first 8 columns as features
Y = df.iloc[:, 8:]  # Selecting the last column as the target

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.46, random_state=46)


def apply_model(model):
    model.fit(X_train, Y_train)  # Fit the model on the training data
    print("Training score =", model.score(X_train, Y_train))  # Training accuracy
    print("Testing score =", model.score(X_test, Y_test))  # Testing accuracy
    print("Accuracy =", model.score(X_test, Y_test))  # Same as testing score
    Y_pred = model.predict(X_test)  # Predict on the test data
    print("Predicted values:\n", Y_pred)  # Predicted values
    print("Confusion Matrix:\n", confusion_matrix(Y_test, Y_pred))  # Confusion matrix
    print("Classification Report:\n", classification_report(Y_test, Y_pred))  # Classification report

# K-Nearest Neighbors (KNN) Model
knn = KNeighborsClassifier(n_neighbors=5)  # Initialize KNN with 5 neighbors
apply_model(knn)  
